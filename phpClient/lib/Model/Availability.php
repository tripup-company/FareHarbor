<?php
/**
 * Availability
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * fareharbor API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Availability Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Availability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Availability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_at' => 'string',
'capacity' => 'int',
'customer_type_rates' => '\Swagger\Client\Model\CustomerPrototype[]',
'minimum_party_size' => 'int',
'end_at' => 'string',
'maximum_party_size' => 'int',
'pk' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_at' => null,
'capacity' => null,
'customer_type_rates' => null,
'minimum_party_size' => null,
'end_at' => null,
'maximum_party_size' => null,
'pk' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_at' => 'start_at',
'capacity' => 'capacity',
'customer_type_rates' => 'customer_type_rates',
'minimum_party_size' => 'minimum_party_size',
'end_at' => 'end_at',
'maximum_party_size' => 'maximum_party_size',
'pk' => 'pk'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_at' => 'setStartAt',
'capacity' => 'setCapacity',
'customer_type_rates' => 'setCustomerTypeRates',
'minimum_party_size' => 'setMinimumPartySize',
'end_at' => 'setEndAt',
'maximum_party_size' => 'setMaximumPartySize',
'pk' => 'setPk'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_at' => 'getStartAt',
'capacity' => 'getCapacity',
'customer_type_rates' => 'getCustomerTypeRates',
'minimum_party_size' => 'getMinimumPartySize',
'end_at' => 'getEndAt',
'maximum_party_size' => 'getMaximumPartySize',
'pk' => 'getPk'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_at'] = isset($data['start_at']) ? $data['start_at'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['customer_type_rates'] = isset($data['customer_type_rates']) ? $data['customer_type_rates'] : null;
        $this->container['minimum_party_size'] = isset($data['minimum_party_size']) ? $data['minimum_party_size'] : null;
        $this->container['end_at'] = isset($data['end_at']) ? $data['end_at'] : null;
        $this->container['maximum_party_size'] = isset($data['maximum_party_size']) ? $data['maximum_party_size'] : null;
        $this->container['pk'] = isset($data['pk']) ? $data['pk'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_at
     *
     * @return string
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param string $start_at start_at
     *
     * @return $this
     */
    public function setStartAt($start_at)
    {
        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return int
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param int $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets customer_type_rates
     *
     * @return \Swagger\Client\Model\CustomerPrototype[]
     */
    public function getCustomerTypeRates()
    {
        return $this->container['customer_type_rates'];
    }

    /**
     * Sets customer_type_rates
     *
     * @param \Swagger\Client\Model\CustomerPrototype[] $customer_type_rates customer_type_rates
     *
     * @return $this
     */
    public function setCustomerTypeRates($customer_type_rates)
    {
        $this->container['customer_type_rates'] = $customer_type_rates;

        return $this;
    }

    /**
     * Gets minimum_party_size
     *
     * @return int
     */
    public function getMinimumPartySize()
    {
        return $this->container['minimum_party_size'];
    }

    /**
     * Sets minimum_party_size
     *
     * @param int $minimum_party_size minimum_party_size
     *
     * @return $this
     */
    public function setMinimumPartySize($minimum_party_size)
    {
        $this->container['minimum_party_size'] = $minimum_party_size;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return string
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param string $end_at end_at
     *
     * @return $this
     */
    public function setEndAt($end_at)
    {
        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets maximum_party_size
     *
     * @return int
     */
    public function getMaximumPartySize()
    {
        return $this->container['maximum_party_size'];
    }

    /**
     * Sets maximum_party_size
     *
     * @param int $maximum_party_size maximum_party_size
     *
     * @return $this
     */
    public function setMaximumPartySize($maximum_party_size)
    {
        $this->container['maximum_party_size'] = $maximum_party_size;

        return $this;
    }

    /**
     * Gets pk
     *
     * @return int
     */
    public function getPk()
    {
        return $this->container['pk'];
    }

    /**
     * Sets pk
     *
     * @param int $pk pk
     *
     * @return $this
     */
    public function setPk($pk)
    {
        $this->container['pk'] = $pk;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
